{
	"info": {
		"_postman_id": "6241a48d-f65b-48e9-80bc-feac845d5ee9",
		"name": "Gachana",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "39572870",
		"_collection_link": "https://gachana.postman.co/workspace/Gachana-Workspace~ccd2cd2e-8e57-46e0-9577-e2befa5a4699/collection/39718315-6241a48d-f65b-48e9-80bc-feac845d5ee9?action=share&source=collection_link&creator=39572870"
	},
	"item": [
		{
			"name": "gacha_service",
			"item": [
				{
					"name": "Player",
					"item": [
						{
							"name": "get_user_collection",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Validate status code",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Validate response for a user with a collection",
											"pm.test(\"Response contains a list of Gacha items\", function () {",
											"    const jsonData = pm.response.json();",
											"    if (jsonData.length > 0) {",
											"",
											"        jsonData.forEach(item => {",
											"            pm.expect(jsonData).to.be.an(\"array\");",
											"",
											"            pm.expect(item).to.have.property(\"id\");",
											"            pm.expect(item).to.have.property(\"name\");",
											"            pm.expect(item).to.have.property(\"id_img\");",
											"            pm.expect(item).to.have.property(\"quantity\");",
											"        });",
											"    } else {",
											"        pm.test(\"Message for empty collection\", function () {",
											"            pm.expect(jsonData.message).to.equal(\"User owns no gachas.\");",
											"        });",
											"    }",
											"});",
											"",
											"// Validate error for invalid or missing token",
											"pm.test(\"Invalid or missing token\", function () {",
											"    if (pm.response.code === 401) {",
											"        const jsonData = pm.response.json();",
											"        pm.expect(jsonData.message).to.be.oneOf([",
											"            \"Could not access user data.\",",
											"            \"Could not access user id.\"",
											"        ]);",
											"    }",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwtTokenPlayer}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{gacha_url}}/collection",
									"host": [
										"{{gacha_url}}"
									],
									"path": [
										"collection"
									]
								}
							},
							"response": []
						},
						{
							"name": "get_user_gacha",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Validate status code",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Validate response for a valid Gacha item",
											"pm.test(\"Response contains expected Gacha fields\", function () {",
											"    const jsonData = pm.response.json();",
											"    if (pm.response.code === 200) {",
											"        pm.expect(jsonData).to.be.an(\"object\");",
											"        pm.expect(jsonData).to.have.property(\"id\");",
											"        pm.expect(jsonData).to.have.property(\"name\");",
											"        pm.expect(jsonData).to.have.property(\"description\");",
											"        pm.expect(jsonData).to.have.property(\"id_img\");",
											"        pm.expect(jsonData).to.have.property(\"rarity\");",
											"    }",
											"});",
											"",
											"// Validate Gacha not found response",
											"pm.test(\"Gacha not found or not owned by user\", function () {",
											"    if (pm.response.code === 404) {",
											"        const jsonData = pm.response.json();",
											"        pm.expect(jsonData.message).to.equal(\"Gacha not found or not owned by user.\");",
											"    }",
											"});",
											"",
											"// Validate response for invalid or missing token",
											"pm.test(\"Invalid or missing token\", function () {",
											"    if (pm.response.code === 401) {",
											"        const jsonData = pm.response.json();",
											"        pm.expect(jsonData.message).to.be.oneOf([",
											"            \"Could not access user data.\",",
											"            \"Could not access user id.\"",
											"        ]);",
											"    }",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwtTokenPlayer}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{gacha_url}}/collection/1",
									"host": [
										"{{gacha_url}}"
									],
									"path": [
										"collection",
										"1"
									]
								}
							},
							"response": []
						},
						{
							"name": "get_available_gachas",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Validate status code",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Validate response for available Gacha items",
											"pm.test(\"Response contains a list of available Gacha items\", function () {",
											"    const jsonData = pm.response.json();",
											"    if (jsonData.length > 0) {",
											"        pm.expect(jsonData).to.be.an(\"array\");",
											"        jsonData.forEach(item => {",
											"            pm.expect(item).to.have.property(\"id\");",
											"            pm.expect(item).to.have.property(\"name\");",
											"            pm.expect(item).to.have.property(\"id_img\");",
											"        });",
											"    } else {",
											"        pm.test(\"Message when user owns all Gacha items\", function () {",
											"            pm.expect(jsonData.message).to.equal(\"User owns every gacha.\");",
											"        });",
											"    }",
											"});",
											"",
											"// Validate response for invalid or missing token",
											"pm.test(\"Invalid or missing token\", function () {",
											"    if (pm.response.code === 401) {",
											"        const jsonData = pm.response.json();",
											"        pm.expect(jsonData.message).to.be.oneOf([",
											"            \"Could not access user data.\",",
											"            \"Could not access user id.\"",
											"        ]);",
											"    }",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwtTokenPlayer}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{gacha_url}}/collection/available",
									"host": [
										"{{gacha_url}}"
									],
									"path": [
										"collection",
										"available"
									]
								}
							},
							"response": []
						},
						{
							"name": "get_available_gacha",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Validate status code",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Validate response for an available Gacha item",
											"pm.test(\"Response contains expected Gacha fields if available\", function () {",
											"    const jsonData = pm.response.json();",
											"    if (pm.response.code === 200 && jsonData.id) {",
											"        pm.expect(jsonData).to.be.an(\"object\");",
											"        pm.expect(jsonData).to.have.property(\"id\");",
											"        pm.expect(jsonData).to.have.property(\"name\");",
											"        pm.expect(jsonData).to.have.property(\"description\");",
											"        pm.expect(jsonData).to.have.property(\"id_img\");",
											"        pm.expect(jsonData).to.have.property(\"rarity\");",
											"    } else {",
											"        pm.test(\"Message when Gacha is already owned\", function () {",
											"            pm.expect(jsonData.message).to.equal(\"User already owns this gacha.\");",
											"        });",
											"    }",
											"});",
											"",
											"// Validate response for invalid or missing token",
											"pm.test(\"Invalid or missing token\", function () {",
											"    if (pm.response.code === 401) {",
											"        const jsonData = pm.response.json();",
											"        pm.expect(jsonData.message).to.be.oneOf([",
											"            \"Could not access user data.\",",
											"            \"Could not access user id.\"",
											"        ]);",
											"    }",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwtTokenPlayer}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{gacha_url}}/collection/available/1",
									"host": [
										"{{gacha_url}}"
									],
									"path": [
										"collection",
										"available",
										"1"
									]
								}
							},
							"response": []
						},
						{
							"name": "roll_gacha",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Validate status code",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Validate response for a successful Gacha roll",
											"pm.test(\"Response contains success message\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.be.an(\"object\");",
											"    pm.expect(jsonData).to.have.property(\"message\");",
											"    pm.expect(jsonData.message).to.match(/^User successfully rolled gacha \\d+\\.$/);",
											"});",
											"",
											"// Validate response for invalid or missing token",
											"pm.test(\"Invalid or missing token\", function () {",
											"    if (pm.response.code === 401) {",
											"        const jsonData = pm.response.json();",
											"        pm.expect(jsonData.message).to.be.oneOf([",
											"            \"Could not access user data.\",",
											"            \"Could not access user id.\"",
											"        ]);",
											"    }",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwtTokenPlayer}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{gacha_url}}/collection/roll",
									"host": [
										"{{gacha_url}}"
									],
									"path": [
										"collection",
										"roll"
									]
								}
							},
							"response": []
						},
						{
							"name": "collection-add",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status Code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response contains success message\", function () {",
											"    const jsonResponse = pm.response.json();",
											"    pm.expect(jsonResponse).to.have.property(\"message\");",
											"    pm.expect(jsonResponse.message).to.match(/Gacha \\d+ successfully added to user \\d+/);",
											"});",
											"",
											"// Validate error for invalid or missing token",
											"pm.test(\"Invalid or missing token\", function () {",
											"    if (pm.response.code === 401) {",
											"        const jsonData = pm.response.json();",
											"        pm.expect(jsonData.message).to.be.oneOf([",
											"            \"Could not access user data.\",",
											"            \"Could not access user id.\"",
											"        ]);",
											"    }",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwtTokenPlayer}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{gacha_url}}/collection/add/3",
									"host": [
										"{{gacha_url}}"
									],
									"path": [
										"collection",
										"add",
										"3"
									]
								}
							},
							"response": []
						},
						{
							"name": "remove",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status Code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response contains success message\", function () {",
											"    const jsonResponse = pm.response.json();",
											"    pm.expect(jsonResponse).to.have.property(\"message\");",
											"    pm.expect(jsonResponse.message).to.match(/Gacha with ID \\d+ removed from user \\d+/);",
											"});",
											"",
											"pm.test(\"Authorization token was included\", function () {",
											"    pm.expect(pm.request.headers.get('Authorization')).to.exist;",
											"});",
											"",
											"// Validate error for invalid or missing token",
											"pm.test(\"Invalid or missing token\", function () {",
											"    if (pm.response.code === 401) {",
											"        const jsonData = pm.response.json();",
											"        pm.expect(jsonData.message).to.be.oneOf([",
											"            \"Could not access user data.\",",
											"            \"Could not access user id.\"",
											"        ]);",
											"    }",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwtTokenPlayer}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{gacha_url}}/remove/3",
									"host": [
										"{{gacha_url}}"
									],
									"path": [
										"remove",
										"3"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Admin",
					"item": [
						{
							"name": "get_gachas",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Validate status code",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Validate response contains an array of Gacha items",
											"pm.test(\"Response contains a list of Gacha items\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.be.an(\"array\");",
											"    if (jsonData.length > 0) {",
											"        jsonData.forEach(item => {",
											"            pm.expect(item).to.have.property(\"id\");",
											"            pm.expect(item).to.have.property(\"name\");",
											"            pm.expect(item).to.have.property(\"description\");",
											"            pm.expect(item).to.have.property(\"id_img\");",
											"            pm.expect(item).to.have.property(\"rarity\");",
											"        });",
											"    } else {",
											"        pm.test(\"Response is an empty list\", function () {",
											"            pm.expect(jsonData.length).to.equal(0);",
											"        });",
											"    }",
											"});",
											"",
											"// Validate response for unauthorized access",
											"pm.test(\"Unauthorized access\", function () {",
											"    if (pm.response.code === 401) {",
											"        const jsonData = pm.response.json();",
											"        pm.expect(jsonData.message).to.equal(\"Could not access user data.\");",
											"    } else if (pm.response.code === 403) {",
											"        pm.test(\"Forbidden access for non-Admin role\", function () {",
											"            pm.expect(pm.response.text()).to.include(\"Forbidden\");",
											"        });",
											"    }",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwtTokenAdmin}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{gacha_url}}/gachas-list",
									"host": [
										"{{gacha_url}}"
									],
									"path": [
										"gachas-list"
									]
								}
							},
							"response": []
						},
						{
							"name": "get_gacha",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Validate status code",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Validate response structure for the specific Gacha item",
											"pm.test(\"Response contains Gacha item fields\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.be.an(\"array\"); // Response should be an array",
											"    if (jsonData.length > 0) {",
											"        const gacha = jsonData[0]; // Since it's a single Gacha item",
											"        pm.expect(gacha).to.have.property(\"id\");",
											"        pm.expect(gacha).to.have.property(\"name\");",
											"        pm.expect(gacha).to.have.property(\"description\");",
											"        pm.expect(gacha).to.have.property(\"id_img\");",
											"        pm.expect(gacha).to.have.property(\"rarity\");",
											"    } else {",
											"        pm.test(\"Response is empty when Gacha not found\", function () {",
											"            pm.expect(jsonData.length).to.equal(0);",
											"        });",
											"    }",
											"});",
											"",
											"// Validate response for unauthorized or forbidden access",
											"pm.test(\"Unauthorized or Forbidden access\", function () {",
											"    if (pm.response.code === 401) {",
											"        const jsonData = pm.response.json();",
											"        pm.expect(jsonData.message).to.equal(\"Could not access user data.\");",
											"    } else if (pm.response.code === 403) {",
											"        pm.test(\"Forbidden access for non-Admin role\", function () {",
											"            pm.expect(pm.response.text()).to.include(\"Forbidden\");",
											"        });",
											"    }",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwtTokenAdmin}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{gacha_url}}/1",
									"host": [
										"{{gacha_url}}"
									],
									"path": [
										"1"
									]
								}
							},
							"response": []
						},
						{
							"name": "add_gacha",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test Case 1: Valid Request - Adding a new gacha",
											"pm.test(\"Status code is 201 when valid data is provided\", function () {",
											"    pm.response.to.have.status(201);",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.equal(\"Gacha added successfully.\");",
											"    pm.expect(jsonData).to.have.property(\"gacha_id\");",
											"});",
											"",
											"// Test Case 2: Missing JSON Data - Request body is empty or not provided",
											"pm.test(\"Status code is 400 when no data is provided\", function () {",
											"    pm.response.to.have.status(400);",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.equal(\"Invalid request. JSON data is required.\");",
											"});",
											"",
											"// Test Case 3: Missing Required Fields (Name or Rarity) - Name or rarity is missing",
											"pm.test(\"Status code is 400 when 'name' or 'rarity' is missing\", function () {",
											"    pm.response.to.have.status(400);",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.equal(\"Name and rarity are required fields.\");",
											"});",
											"",
											"// Test Case 4: Invalid Rarity Value - Rarity is not one of the allowed values",
											"pm.test(\"Status code is 400 when 'rarity' is invalid\", function () {",
											"    pm.response.to.have.status(400);",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.equal(\"Invalid rarity: InvalidRarity. Must be one of Common, Uncommon, Rare, Super Rare, Legendary.\");",
											"});",
											"",
											"// Example of valid request to trigger the successful add",
											"pm.sendRequest({",
											"    url: pm.environment.get(\"base_url\") + \"/gachas/add\",",
											"    method: 'POST',",
											"    header: {",
											"        \"Authorization\": \"Bearer <your_admin_token>\",",
											"        \"Content-Type\": \"application/json\"",
											"    },",
											"    body: {",
											"        mode: 'raw',",
											"        raw: JSON.stringify({",
											"            name: \"New Gacha\",",
											"            description: \"Description of new gacha.\",",
											"            id_img: \"image_url_here\",",
											"            rarity: \"Rare\"",
											"        })",
											"    }",
											"}, function (err, res) {",
											"    pm.test(\"Status code is 201 for successful creation\", function () {",
											"        pm.expect(res).to.have.status(201);",
											"        pm.expect(res.json()).to.have.property(\"gacha_id\");",
											"    });",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwtTokenAdmin}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"test\",\r\n    \"description\": \"description\",\r\n    \"id_img\": \"id_img\",\r\n    \"rarity\": \"Common\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{gacha_url}}/add",
									"host": [
										"{{gacha_url}}"
									],
									"path": [
										"add"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete_gacha",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200 when gacha is deleted\", function () {",
											"    pm.response.to.have.status(200);",
											"    const jsonData = pm.response.json();",
											"    ",
											"    pm.expect(jsonData.message).to.equal(\"Gacha deleted successfully.\");",
											"    pm.expect(jsonData).to.have.property(\"removed_from_users\");",
											"    pm.expect(jsonData.removed_from_users).to.be.an('array');",
											"});",
											"",
											"pm.test(\"Status code is 500 when there is an error\", function () {",
											"    pm.response.to.have.status(500);",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.match(/Error deleting gacha/);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwtTokenAdmin}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{gacha_url}}/delete/21",
									"host": [
										"{{gacha_url}}"
									],
									"path": [
										"delete",
										"21"
									]
								}
							},
							"response": []
						},
						{
							"name": "patch_gacha",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test for successful update",
											"pm.test(\"Status code is 200 for successful update\", function () {",
											"    pm.response.to.have.status(200);",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.equal(\"Gacha modified successfully.\");",
											"});",
											"",
											"pm.test(\"Status code is 400 when no update data is provided\", function () {",
											"    pm.response.to.have.status(400);",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.equal(\"No data provided for update.\");",
											"});",
											"",
											"// Test for unauthorized access (Invalid or missing token)",
											"pm.test(\"Status code is 401 for unauthorized access\", function () {",
											"    if (pm.response.code === 401) {",
											"        const jsonData = pm.response.json();",
											"        pm.expect(jsonData.message).to.equal(\"Could not access user data.\");",
											"    }",
											"});",
											"",
											"// Test for forbidden access (Non-Admin role)",
											"pm.test(\"Status code is 403 for forbidden access (Non-Admin role)\", function () {",
											"    if (pm.response.code === 403) {",
											"        pm.expect(pm.response.text()).to.include(\"Forbidden\");",
											"    }",
											"});",
											"",
											"// Test that the response is correctly formatted",
											"pm.test(\"Response contains valid JSON body\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property(\"message\");",
											"    pm.expect(jsonData.message).to.be.a(\"string\");",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwtTokenAdmin}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"gacha_name\",\n    \"rarity\": \"Common\",\n    \"description\": \"gacha_description\",\n    \"id_img\": \"abu\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{gacha_url}}/update/1",
									"host": [
										"{{gacha_url}}"
									],
									"path": [
										"update",
										"1"
									]
								}
							},
							"response": []
						}
					],
					"auth": {
						"type": "bearer",
						"bearer": [
							{
								"key": "token",
								"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoxLCJyb2xlIjoiQWRtaW4iLCJleHAiOjE3MzIxMTU2MjV9.3nzN3P-QmnQURspCuNVechMeK9NZnbh8xa76jR1Uk7A",
								"type": "string"
							}
						]
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						}
					]
				}
			]
		},
		{
			"name": "user_service",
			"item": [
				{
					"name": "Admin",
					"item": [
						{
							"name": "get_all_users",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test for successful response (Status 200)",
											"pm.test(\"Status code is 200 and users list is received\", function () {",
											"    pm.response.to.have.status(200);",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property('users');",
											"    pm.expect(jsonData.users).to.be.an('array');",
											"    pm.expect(jsonData.users.length).to.be.greaterThan(0);",
											"});",
											"",
											"// Test for unauthorized access (Status 401)",
											"pm.test(\"Status code is 401 when no token is provided\", function () {",
											"    if (!pm.request.headers.has('Authorization')) {",
											"        pm.response.to.have.status(401);",
											"        const jsonData = pm.response.json();",
											"        pm.expect(jsonData.message).to.equal('Unauthorized');",
											"    }",
											"});",
											"",
											"// Test for forbidden access (Status 403 for incorrect role)",
											"pm.test(\"Status code is 403 when user is not Admin\", function () {",
											"    // In a real test, simulate a non-Admin user and check for the response",
											"    const jsonData = pm.response.json();",
											"    if (jsonData.message === 'Forbidden') {",
											"        pm.response.to.have.status(403);",
											"    }",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwtTokenAdmin}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{user_url}}/list",
									"host": [
										"{{user_url}}"
									],
									"path": [
										"list"
									]
								}
							},
							"response": []
						},
						{
							"name": "get_user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test for successful response (Status 200)",
											"pm.test(\"Status code is 200 and user information is received\", function () {",
											"    pm.response.to.have.status(200);",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property('user');",
											"    pm.expect(jsonData.user).to.be.an('object');",
											"    pm.expect(jsonData.user.id).to.equal(1);  // Replace 1 with the actual user ID being tested",
											"});",
											"",
											"// Test for unauthorized access (Status 401)",
											"pm.test(\"Status code is 401 when no token is provided\", function () {",
											"    if (!pm.request.headers.has('Authorization')) {",
											"        pm.response.to.have.status(401);",
											"        const jsonData = pm.response.json();",
											"        pm.expect(jsonData.message).to.equal('Unauthorized');",
											"    }",
											"});",
											"",
											"// Test for forbidden access (Status 403 for incorrect role)",
											"pm.test(\"Status code is 403 when user is not Admin\", function () {",
											"    // In a real test, simulate a non-Admin user and check for the response",
											"    const jsonData = pm.response.json();",
											"    if (jsonData.message === 'Forbidden') {",
											"        pm.response.to.have.status(403);",
											"    }",
											"});",
											"",
											"// Test for not found (Status 404)",
											"pm.test(\"Status code is 404 when user is not found\", function () {",
											"    pm.response.to.have.status(404);",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.equal('User not found');",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwtTokenAdmin}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{user_url}}/1",
									"host": [
										"{{user_url}}"
									],
									"path": [
										"1"
									]
								}
							},
							"response": []
						},
						{
							"name": "update_user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test for successful update (Status 200)",
											"pm.test(\"Status code is 200 and user updated successfully\", function () {",
											"    pm.response.to.have.status(200);",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.equal('User updated successfully');",
											"});",
											"",
											"// Test for missing data (Status 400)",
											"pm.test(\"Status code is 400 when no data is provided for update\", function () {",
											"    const jsonData = pm.response.json();",
											"    if (jsonData.message === 'No data provided for update') {",
											"        pm.response.to.have.status(400);",
											"    }",
											"});",
											"",
											"// Test for unauthorized access (Status 401)",
											"pm.test(\"Status code is 401 when no token is provided\", function () {",
											"    if (!pm.request.headers.has('Authorization')) {",
											"        pm.response.to.have.status(401);",
											"        const jsonData = pm.response.json();",
											"        pm.expect(jsonData.message).to.equal('Unauthorized');",
											"    }",
											"});",
											"",
											"// Test for forbidden access (Status 403 when the user is not an Admin)",
											"pm.test(\"Status code is 403 when the user is not an Admin\", function () {",
											"    // If you're simulating a non-admin user",
											"    const jsonData = pm.response.json();",
											"    if (jsonData.message === 'Forbidden') {",
											"        pm.response.to.have.status(403);",
											"    }",
											"});",
											"",
											"// Test for user not found (Status 404)",
											"pm.test(\"Status code is 404 when user ID is not found\", function () {",
											"    const jsonData = pm.response.json();",
											"    if (jsonData.message === 'User not found') {",
											"        pm.response.to.have.status(404);",
											"    }",
											"});",
											"",
											"// Test for partial update (when some fields are provided)",
											"pm.test(\"Status code is 200 for partial update with some fields provided\", function () {",
											"    // Testing with only username updated",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.equal('User updated successfully');",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwtTokenAdmin}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"marco2\",\r\n    \"psw\": \"prova2\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{user_url}}/update",
									"host": [
										"{{user_url}}"
									],
									"path": [
										"update"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete_user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test for successful deletion (Status 200)",
											"pm.test(\"Status code is 200 and user account deleted successfully\", function () {",
											"    pm.response.to.have.status(200);",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.equal('User account deleted successfully!');",
											"});",
											"",
											"// Test for unauthorized access (Status 401)",
											"pm.test(\"Status code is 401 when no token is provided\", function () {",
											"    if (!pm.request.headers.has('Authorization')) {",
											"        pm.response.to.have.status(401);",
											"        const jsonData = pm.response.json();",
											"        pm.expect(jsonData.message).to.equal('Unauthorized');",
											"    }",
											"});",
											"",
											"// Test for forbidden access (Status 403 when the user is not an Admin)",
											"pm.test(\"Status code is 403 when the user is not an Admin\", function () {",
											"    const jsonData = pm.response.json();",
											"    if (jsonData.message === 'Forbidden') {",
											"        pm.response.to.have.status(403);",
											"    }",
											"});",
											"",
											"// Test for user not found (Status 404)",
											"pm.test(\"Status code is 404 when user ID is not found\", function () {",
											"    const jsonData = pm.response.json();",
											"    if (jsonData.message === 'User not found') {",
											"        pm.response.to.have.status(404);",
											"    }",
											"});",
											"",
											"// Test for deleting a non-existent user (Status 404)",
											"pm.test(\"Status code is 404 when user does not exist\", function () {",
											"    const jsonData = pm.response.json();",
											"    if (jsonData.message === 'User not found') {",
											"        pm.response.to.have.status(404);",
											"    }",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwtTokenAdmin}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{user_url}}/2/delete",
									"host": [
										"{{user_url}}"
									],
									"path": [
										"2",
										"delete"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Player",
					"item": [
						{
							"name": "delete",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test for successful deletion (Status 200)",
											"pm.test(\"Status code is 200 and user account deleted successfully\", function () {",
											"    pm.response.to.have.status(200);",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.equal('User account deleted successfully!');",
											"});",
											"",
											"// Test for missing Authorization header (Status 401)",
											"pm.test(\"Status code is 401 when no token is provided\", function () {",
											"    if (!pm.request.headers.has('Authorization')) {",
											"        pm.response.to.have.status(401);",
											"        const jsonData = pm.response.json();",
											"        pm.expect(jsonData.message).to.equal('Unauthorized');",
											"    }",
											"});",
											"",
											"// Test for invalid token (Status 401)",
											"pm.test(\"Status code is 401 for invalid token\", function () {",
											"    const token = 'Bearer invalid_token'; // Replace with an invalid token",
											"    pm.request.headers.add({ key: 'Authorization', value: token });",
											"    pm.sendRequest(pm.request, function (err, res) {",
											"        pm.expect(res).to.have.status(401);",
											"        const jsonData = res.json();",
											"        pm.expect(jsonData.message).to.equal('Unauthorized');",
											"    });",
											"});",
											"",
											"// Test for deletion when the user does not exist (Status 404)",
											"pm.test(\"Status code is 404 if the user does not exist\", function () {",
											"    const jsonData = pm.response.json();",
											"    if (jsonData.message === 'User not found') {",
											"        pm.response.to.have.status(404);",
											"    }",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwtTokenPlayer}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{user_url}}/delete",
									"host": [
										"{{user_url}}"
									],
									"path": [
										"delete"
									]
								}
							},
							"response": []
						},
						{
							"name": "update",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test for successful user information update (Status 200)",
											"pm.test(\"User information updated successfully\", function () {",
											"    pm.response.to.have.status(200);",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.equal('User information updated successfully');",
											"});",
											"",
											"// Test for successful wallet update (Status 200)",
											"pm.test(\"Wallet updated successfully\", function () {",
											"    pm.response.to.have.status(200);",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.include('added to your wallet successfully');",
											"});",
											"",
											"// Test for missing data in the request body (Status 400)",
											"pm.test(\"Status code is 400 if no data is provided for update\", function () {",
											"    const jsonData = pm.response.json();",
											"    if (jsonData.message === 'No data provided for update') {",
											"        pm.response.to.have.status(400);",
											"        pm.expect(jsonData.message).to.equal('No data provided for update');",
											"    }",
											"});",
											"",
											"// Test for invalid token (Status 401)",
											"pm.test(\"Status code is 401 for invalid token\", function () {",
											"    const token = 'Bearer invalid_token'; // Replace with an invalid token",
											"    pm.request.headers.add({ key: 'Authorization', value: token });",
											"    pm.sendRequest(pm.request, function (err, res) {",
											"        pm.expect(res).to.have.status(401);",
											"        const jsonData = res.json();",
											"        pm.expect(jsonData.message).to.equal('Unauthorized');",
											"    });",
											"});",
											"",
											"// Test for invalid wallet amount (Status 400)",
											"pm.test(\"Status code is 400 for invalid wallet amount\", function () {",
											"    const invalidData = {",
											"        \"amount\": -100,",
											"        \"card_number\": \"1234567812345678\",",
											"        \"expiry_date\": \"12/25\",",
											"        \"cvv\": \"123\"",
											"    };",
											"    pm.request.body.raw = JSON.stringify(invalidData);",
											"    pm.sendRequest(pm.request, function (err, res) {",
											"        pm.expect(res).to.have.status(400);",
											"        const jsonData = res.json();",
											"        pm.expect(jsonData.message).to.equal('Invalid amount. Must be greater than zero.');",
											"    });",
											"});",
											"",
											"// Test for missing card details (Status 400)",
											"pm.test(\"Status code is 400 for missing card details\", function () {",
											"    const invalidPaymentData = {",
											"        \"amount\": 100,",
											"        \"expiry_date\": \"12/25\",",
											"        \"cvv\": \"123\"",
											"    };",
											"    pm.request.body.raw = JSON.stringify(invalidPaymentData);",
											"    pm.sendRequest(pm.request, function (err, res) {",
											"        pm.expect(res).to.have.status(400);",
											"        const jsonData = res.json();",
											"        pm.expect(jsonData.message).to.equal('Invalid card details. All fields are required.');",
											"    });",
											"});",
											"",
											"// Test for failed payment (Status 400)",
											"pm.test(\"Status code is 400 if payment fails\", function () {",
											"    const failedPaymentData = {",
											"        \"amount\": 100,",
											"        \"card_number\": \"invalid_card_number\",",
											"        \"expiry_date\": \"12/25\",",
											"        \"cvv\": \"123\"",
											"    };",
											"    pm.request.body.raw = JSON.stringify(failedPaymentData);",
											"    pm.sendRequest(pm.request, function (err, res) {",
											"        pm.expect(res).to.have.status(400);",
											"        const jsonData = res.json();",
											"        pm.expect(jsonData.message).to.equal('Payment failed. Please check your card details.');",
											"    });",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwtTokenPlayer}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"marco\",\r\n    \"psw\": \"prova2\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{user_url}}/update",
									"host": [
										"{{user_url}}"
									],
									"path": [
										"update"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test when data is missing or the username already exists",
									"pm.test(\"Status code is 400 when incomplete data is provided or username already exists\", function () {",
									"    pm.response.to.have.status(400);",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.be.oneOf([",
									"        \"Incomplete data\",",
									"        \"Username already exists\"]);",
									"});",
									"",
									"// Test when user is successfully created",
									"pm.test(\"Status code is 201 when user is added\", function () {",
									"    pm.response.to.have.status(201);",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.equal(\"User added!\");",
									"});",
									"",
									"// Test for missing username or password (Status 400)",
									"pm.test(\"Status code is 400 when username or password is missing\", function () {",
									"    const jsonData = pm.response.json();",
									"    if (!pm.request.body.raw.username || !pm.request.body.raw.psw) {",
									"        pm.response.to.have.status(400);",
									"        pm.expect(jsonData.message).to.equal('Incomplete data');",
									"    }",
									"});",
									"",
									"// Test for username already exists (Status 400)",
									"pm.test(\"Status code is 400 when username already exists\", function () {",
									"    const jsonData = pm.response.json();",
									"    if (jsonData.message === 'Username already exists') {",
									"        pm.response.to.have.status(400);",
									"        pm.expect(jsonData.message).to.equal('Username already exists');",
									"    }",
									"});",
									"",
									"// Test for a successful response (message in body)",
									"pm.test(\"Message should be 'User added!'\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.equal('User added!');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoxLCJyb2xlIjoiQWRtaW4iLCJleHAiOjE3MzE2MDAwMzl9.fnYeO4BcoDjvp_n4q6M5zx5slIWcguxYVlIIWxsKgSc",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"marco\",\r\n    \"psw\": \"prova\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{user_url}}/signup",
							"host": [
								"{{user_url}}"
							],
							"path": [
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Assumendo che il token sia restituito nel corpo della risposta come \"token\"\r",
									"const jsonData = pm.response.json();\r",
									"\r",
									"// Salva il token come variabile globale o d'ambiente\r",
									"pm.environment.set(\"jwtTokenAdmin\", jsonData.token); // Usa pm.globals.set() per una variabile globale\r",
									"\r",
									"// Facoltativo: Stampa il token nella console di Postman per debugging\r",
									"console.log(\"JWT Token salvato:\", jsonData.token);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\":\"admin\",\r\n    \"password\":\"gachana\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{user_url}}/login",
							"host": [
								"{{user_url}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "logout",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{user_url}}/logout",
							"host": [
								"{{user_url}}"
							],
							"path": [
								"logout"
							]
						}
					},
					"response": []
				},
				{
					"name": "login player",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Assumendo che il token sia restituito nel corpo della risposta come \"token\"\r",
									"const jsonData = pm.response.json();\r",
									"\r",
									"// Salva il token come variabile globale o d'ambiente\r",
									"pm.environment.set(\"jwtTokenPlayer\", jsonData.token); // Usa pm.globals.set() per una variabile globale\r",
									"\r",
									"// Facoltativo: Stampa il token nella console di Postman per debugging\r",
									"console.log(\"JWT Token salvato:\", jsonData.token);\r",
									"\r",
									"// Test for successful login (Status 200)\r",
									"pm.test(\"Status code is 200 and token is received\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('token');\r",
									"});\r",
									"\r",
									"// Test for invalid credentials (Status 401)\r",
									"/*pm.test(\"Status code is 401 and invalid credentials message\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.equal('Invalid credentials');\r",
									"});*/"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\":\"marco\",\r\n    \"password\":\"prova\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{user_url}}/login",
							"host": [
								"{{user_url}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "currency_service",
			"item": [
				{
					"name": "Player",
					"item": [
						{
							"name": "get_transactions",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test for successful response",
											"pm.test(\"Status code is 200 when transactions are retrieved successfully\", function () {",
											"    if (pm.response.status === 200) {",
											"        pm.response.to.have.status(200);",
											"        const jsonData = pm.response.json();",
											"        pm.expect(jsonData).to.be.an('array');",
											"        pm.expect(jsonData.length).to.be.greaterThan(0);",
											"    }",
											"});",
											"",
											"// Test for no transactions found",
											"pm.test(\"Status code is 404 when no transactions are found\", function () {",
											"    if (pm.response.status === 404) {",
											"        pm.response.to.have.status(404);",
											"        const jsonData = pm.response.json();",
											"        pm.expect(jsonData.message).to.equal(\"No transactions found for the user.\");",
											"    }",
											"});",
											"",
											"// Test for unauthorized access",
											"pm.test(\"Status code is 401 for unauthorized access\", function () {",
											"    if (pm.response.status === 401) {",
											"        pm.response.to.have.status(401);",
											"        const jsonData = pm.response.json();",
											"        pm.expect(jsonData.message).to.equal(\"Could not access user data.\");",
											"    }",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwtTokenPlayer}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{currency_url}}/transactions",
									"host": [
										"{{currency_url}}"
									],
									"path": [
										"transactions"
									]
								}
							},
							"response": []
						},
						{
							"name": "buy_currency",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test for invalid amount",
											"pm.test(\"Status code is 400 when the amount is missing or invalid\", function () {",
											"    if (pm.response.status === 400) {",
											"        const jsonData = pm.response.json();",
											"        pm.expect(jsonData.message).to.include(\"Invalid amount\");",
											"    }",
											"});",
											"",
											"// Test for invalid card details",
											"pm.test(\"Status code is 400 when card details are missing or incomplete\", function () {",
											"    if (pm.response.status === 400) {",
											"        const jsonData = pm.response.json();",
											"        pm.expect(jsonData.message).to.include(\"Invalid card details\");",
											"    }",
											"});",
											"",
											"// Test for payment failure",
											"pm.test(\"Status code is 400 when payment simulation fails\", function () {",
											"    if (pm.response.status === 400) {",
											"        const jsonData = pm.response.json();",
											"        pm.expect(jsonData.message).to.include(\"Payment failed\");",
											"    }",
											"});",
											"",
											"// Test for successful transaction",
											"pm.test(\"Status code is 200 when funds are added successfully\", function () {",
											"    if (pm.response.status === 200) {",
											"        const jsonData = pm.response.json();",
											"        pm.expect(jsonData.message).to.include(\"added to your wallet successfully\");",
											"    }",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwtTokenPlayer}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"amount\": 200.00,\r\n    \"card_number\": \"1234567812345678\",\r\n    \"expiry_date\": \"12/25\",\r\n    \"cvv\": \"123\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{currency_url}}/buy_currency",
									"host": [
										"{{currency_url}}"
									],
									"path": [
										"buy_currency"
									]
								}
							},
							"response": []
						},
						{
							"name": "wallet",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test for successful wallet retrieval",
											"pm.test(\"Status code is 200 when wallet is retrieved\", function () {",
											"    if (pm.response.status === 200) {",
											"        pm.response.to.have.status(200);",
											"        const jsonData = pm.response.json();",
											"        pm.expect(jsonData).to.be.an('array');",
											"        pm.expect(jsonData.length).to.equal(1); // Ensure exactly one wallet record",
											"        pm.expect(jsonData[0]).to.have.property('wallet');",
											"        pm.expect(jsonData[0].wallet).to.be.a('number'); // Wallet should be a numeric value",
											"    }",
											"});",
											"",
											"// Test for no wallet found",
											"pm.test(\"Status code is 404 when no wallet is found\", function () {",
											"    if (pm.response.status === 404) {",
											"        pm.response.to.have.status(404);",
											"        const jsonData = pm.response.json();",
											"        pm.expect(jsonData.message).to.equal(\"No wallet found for the user.\");",
											"    }",
											"});",
											"",
											"// Test for unauthorized access",
											"pm.test(\"Status code is 401 for unauthorized access\", function () {",
											"    if (pm.response.status === 401) {",
											"        pm.response.to.have.status(401);",
											"        const jsonData = pm.response.json();",
											"        pm.expect(jsonData.message).to.equal(\"Could not access user data.\");",
											"    }",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwtTokenPlayer}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{currency_url}}/wallet",
									"host": [
										"{{currency_url}}"
									],
									"path": [
										"wallet"
									]
								}
							},
							"response": []
						},
						{
							"name": "spend_currency",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test for successful deduction",
											"pm.test(\"Status code is 200 when funds are deducted\", function () {",
											"    if (pm.response.status === 200) {",
											"        pm.response.to.have.status(200);",
											"        const jsonData = pm.response.json();",
											"        pm.expect(jsonData.message).to.include(\"deducted from your wallet successfully!\");",
											"    }",
											"});",
											"",
											"// Test for insufficient funds",
											"pm.test(\"Status code is 400 when funds are insufficient\", function () {",
											"    if (pm.response.status === 400) {",
											"        pm.response.to.have.status(400);",
											"        const jsonData = pm.response.json();",
											"        pm.expect(jsonData.message).to.equal(\"Insufficient funds in wallet.\");",
											"    }",
											"});",
											"",
											"// Test for invalid or missing amount",
											"pm.test(\"Status code is 400 when amount is invalid\", function () {",
											"    if (pm.response.status === 400) {",
											"        pm.response.to.have.status(400);",
											"        const jsonData = pm.response.json();",
											"        pm.expect(jsonData.message).to.equal(\"Invalid amount. Must be greater than zero.\");",
											"    }",
											"});",
											"",
											"// Test for wallet not found",
											"pm.test(\"Status code is 404 when wallet is not found\", function () {",
											"    if (pm.response.status === 404) {",
											"        pm.response.to.have.status(404);",
											"        const jsonData = pm.response.json();",
											"        pm.expect(jsonData.message).to.equal(\"Wallet not found for the user.\");",
											"    }",
											"});",
											"",
											"// Test for unauthorized access",
											"pm.test(\"Status code is 401 for unauthorized access\", function () {",
											"    if (pm.response.status === 401) {",
											"        pm.response.to.have.status(401);",
											"        const jsonData = pm.response.json();",
											"        pm.expect(jsonData.message).to.equal(\"Could not access user data.\");",
											"    }",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwtTokenPlayer}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"amount\": 100.00\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{currency_url}}/spend_currency",
									"host": [
										"{{currency_url}}"
									],
									"path": [
										"spend_currency"
									]
								}
							},
							"response": []
						},
						{
							"name": "refund",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwtTokenPlayer}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"token\": \"\"\r\n    \r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{market_url}}/refund",
									"host": [
										"{{market_url}}"
									],
									"path": [
										"refund"
									]
								}
							},
							"response": []
						},
						{
							"name": "add_currency",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwtTokenPlayer}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"token\": \"\"\r\n    \r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{market_url}}/add_currency",
									"host": [
										"{{market_url}}"
									],
									"path": [
										"add_currency"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Admin",
					"item": [
						{
							"name": "get_all_transactions",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test for successful response",
											"pm.test(\"Status code is 200 when all transactions are retrieved\", function () {",
											"    if (pm.response.status === 200) {",
											"        pm.response.to.have.status(200);",
											"        const jsonData = pm.response.json();",
											"        pm.expect(jsonData).to.be.an('array');",
											"    }",
											"});",
											"",
											"// Test for unauthorized access",
											"pm.test(\"Status code is 401 for unauthorized access\", function () {",
											"    if (pm.response.status === 401) {",
											"        pm.response.to.have.status(401);",
											"        const jsonData = pm.response.json();",
											"        pm.expect(jsonData.message).to.equal(\"Could not access user data.\");",
											"    }",
											"});",
											"",
											"// Test for no transactions (if applicable)",
											"pm.test(\"Transactions list is empty when there are no records\", function () {",
											"    if (pm.response.status === 200) {",
											"        const jsonData = pm.response.json();",
											"        pm.expect(jsonData).to.be.an('array').that.is.empty;",
											"    }",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwtTokenAdmin}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{currency_url}}/transactions/list",
									"host": [
										"{{currency_url}}"
									],
									"path": [
										"transactions",
										"list"
									]
								}
							},
							"response": []
						},
						{
							"name": "get_user_transactions",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test for successful response",
											"pm.test(\"Status code is 200 when user transactions are retrieved\", function () {",
											"    if (pm.response.status === 200) {",
											"        pm.response.to.have.status(200);",
											"        const jsonData = pm.response.json();",
											"        pm.expect(jsonData).to.be.an('array');",
											"        pm.expect(jsonData.length).to.be.greaterThan(0); // Ensure transactions exist",
											"        pm.expect(jsonData[0]).to.have.property('id');",
											"        pm.expect(jsonData[0]).to.have.property('user_id');",
											"        pm.expect(jsonData[0]).to.have.property('old_wallet');",
											"        pm.expect(jsonData[0]).to.have.property('new_wallet');",
											"        pm.expect(jsonData[0]).to.have.property('description');",
											"        pm.expect(jsonData[0]).to.have.property('date');",
											"    }",
											"});",
											"",
											"// Test for no transactions found",
											"pm.test(\"Status code is 404 when no transactions are found\", function () {",
											"    if (pm.response.status === 404) {",
											"        pm.response.to.have.status(404);",
											"        const jsonData = pm.response.json();",
											"        pm.expect(jsonData.message).to.equal(\"No transactions found for the specified user.\");",
											"    }",
											"});",
											"",
											"// Test for unauthorized access",
											"pm.test(\"Status code is 401 for unauthorized access\", function () {",
											"    if (pm.response.status === 401) {",
											"        pm.response.to.have.status(401);",
											"        const jsonData = pm.response.json();",
											"        pm.expect(jsonData.message).to.equal(\"Could not access user data.\");",
											"    }",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwtTokenAdmin}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{currency_url}}/transactions/2",
									"host": [
										"{{currency_url}}"
									],
									"path": [
										"transactions",
										"2"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "market_service",
			"item": [
				{
					"name": "Player",
					"item": [
						{
							"name": "list",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test for successful retrieval of market items",
											"pm.test(\"Status code is 200 and market items are retrieved\", function () {",
											"    pm.response.to.have.status(200);",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.be.an(\"array\");",
											"    if (jsonData.length > 0) {",
											"        pm.expect(jsonData[0]).to.have.property(\"id\");",
											"        pm.expect(jsonData[0]).to.have.property(\"gacha_id\");",
											"        pm.expect(jsonData[0]).to.have.property(\"user_id\");",
											"        pm.expect(jsonData[0]).to.have.property(\"init_value\");",
											"        pm.expect(jsonData[0]).to.have.property(\"value_last_offer\");",
											"        pm.expect(jsonData[0]).to.have.property(\"start_date\");",
											"        pm.expect(jsonData[0]).to.have.property(\"end_date\");",
											"    } else {",
											"        console.log(\"Market list is empty.\");",
											"    }",
											"});",
											"",
											"// Test for empty market",
											"pm.test(\"Handles empty market response gracefully\", function () {",
											"    const jsonData = pm.response.json();",
											"    if (jsonData.length === 0) {",
											"        console.log(\"No items in the market.\");",
											"        pm.expect(jsonData).to.be.an(\"array\").that.is.empty;",
											"    }",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{market_url}}/list",
									"host": [
										"{{market_url}}"
									],
									"path": [
										"list"
									]
								}
							},
							"response": []
						},
						{
							"name": "new-auction",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test for successful auction creation",
											"pm.test(\"Status code is 201 and auction is created\", function () {",
											"    pm.response.to.have.status(201);",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.equal(\"Item listed for sale.\");",
											"});",
											"",
											"// Test for missing token (unauthorized access)",
											"pm.test(\"Status code is 401 when no token is provided\", function () {",
											"    if (pm.request.headers.has(\"Authorization\")) {",
											"        pm.expect(pm.response.code).to.not.equal(401); // Token exists, should not return 401",
											"    } else {",
											"        pm.response.to.have.status(401);",
											"        const jsonData = pm.response.json();",
											"        pm.expect(jsonData.message).to.equal(\"Could not access user data.\");",
											"    }",
											"});",
											"",
											"// Test for missing required fields",
											"pm.test(\"Status code is 400 for missing required fields\", function () {",
											"    const jsonData = pm.response.json();",
											"    if (pm.response.code === 400) {",
											"        pm.expect(jsonData.message).to.include(\"Invalid\");",
											"    }",
											"});",
											"",
											"// Test for invalid data",
											"pm.test(\"Status code is 500 for invalid data\", function () {",
											"    if (pm.response.code === 500) {",
											"        const jsonData = pm.response.json();",
											"        pm.expect(jsonData.message).to.include(\"Error\");",
											"    }",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwtTokenPlayer}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"gacha_id\": 1,\r\n    \"end_date\": \"2024-11-22\",\r\n    \"init_value\": 80.00\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{market_url}}/new-auction",
									"host": [
										"{{market_url}}"
									],
									"path": [
										"new-auction"
									]
								}
							},
							"response": []
						},
						{
							"name": "new-bid",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test for successful bid placement or update",
											"pm.test(\"Status code is 200 and bid processed successfully\", function () {",
											"    pm.response.to.have.status(200);",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.be.oneOf([",
											"    \"Offer placed successfully.\",",
											"    \"Offer placed successfully.\"]);",
											"});",
											"",
											"// Test for missing token (unauthorized access)",
											"pm.test(\"Status code is 401 when no token is provided\", function () {",
											"    if (!pm.request.headers.has(\"Authorization\")) {",
											"        pm.response.to.have.status(401);",
											"        const jsonData = pm.response.json();",
											"        pm.expect(jsonData.message).to.equal(\"Could not access user data.\");",
											"    }",
											"});",
											"",
											"// Test for missing required fields",
											"pm.test(\"Status code is 400 for missing required fields\", function () {",
											"    const jsonData = pm.response.json();",
											"    if (pm.response.code === 400) {",
											"        pm.expect(jsonData.message).to.include(\"Market ID and offer value are required.\");",
											"    }",
											"});",
											"",
											"// Test for attempting to bid on own auction",
											"pm.test(\"Status code is 403 when bidding on own auction\", function () {",
											"    if (pm.response.code === 403) {",
											"        const jsonData = pm.response.json();",
											"        pm.expect(jsonData.message).to.equal(\"You cannot bid on your own auction.\");",
											"    }",
											"});",
											"",
											"// Test for non-existent market",
											"pm.test(\"Status code is 404 for non-existent market\", function () {",
											"    if (pm.response.code === 404) {",
											"        const jsonData = pm.response.json();",
											"        pm.expect(jsonData.message).to.equal(\"Market not found.\");",
											"    }",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwtTokenPlayer}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"market_id\": 1,\r\n    \"offer_value\": 85\r\n  \r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{market_url}}/new-bid",
									"host": [
										"{{market_url}}"
									],
									"path": [
										"new-bid"
									]
								}
							},
							"response": []
						},
						{
							"name": "offers",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test for successful offer retrieval",
											"pm.test(\"Status code is 200 and offers retrieved successfully\", function () {",
											"    pm.response.to.have.status(200);",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property(\"market_id\");",
											"    pm.expect(jsonData).to.have.property(\"offers\").that.is.an(\"array\");",
											"});",
											"",
											"// Test for missing token (unauthorized access)",
											"pm.test(\"Status code is 401 when no token is provided\", function () {",
											"    if (!pm.request.headers.has(\"Authorization\")) {",
											"        pm.response.to.have.status(401);",
											"        const jsonData = pm.response.json();",
											"        pm.expect(jsonData.message).to.equal(\"Could not access user data.\");",
											"    }",
											"});",
											"",
											"// Test for non-existent market",
											"pm.test(\"Status code is 404 for non-existent market\", function () {",
											"    if (pm.response.code === 404) {",
											"        const jsonData = pm.response.json();",
											"        pm.expect(jsonData.message).to.equal(\"Market not found.\");",
											"    }",
											"});",
											"",
											"// Test for unauthorized access",
											"pm.test(\"Status code is 403 when unauthorized to view offers\", function () {",
											"    if (pm.response.code === 403) {",
											"        const jsonData = pm.response.json();",
											"        pm.expect(jsonData.message).to.equal(\"You are not authorized to view offers for this auction.\");",
											"    }",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwtTokenPlayer}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{market_url}}/1/offers",
									"host": [
										"{{market_url}}"
									],
									"path": [
										"1",
										"offers"
									],
									"query": [
										{
											"key": "",
											"value": "",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "accept",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test for successful offer acceptance",
											"pm.test(\"Status code is 200 and offer accepted successfully\", function () {",
											"    pm.response.to.have.status(200);",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property(\"message\", \"Offer accepted successfully.\");",
											"    pm.expect(jsonData).to.have.property(\"rejected_offers\");",
											"    pm.expect(jsonData).to.have.property(\"gacha_to_add\");",
											"    pm.expect(jsonData).to.have.property(\"currency_to_add\");",
											"    pm.expect(jsonData).to.have.property(\"seller_id\");",
											"    pm.expect(jsonData).to.have.property(\"gacha_id\");",
											"});",
											"",
											"// Test for unauthorized access (missing or invalid token)",
											"pm.test(\"Status code is 401 when no valid token is provided\", function () {",
											"    if (!pm.request.headers.has(\"Authorization\")) {",
											"        pm.response.to.have.status(401);",
											"        const jsonData = pm.response.json();",
											"        pm.expect(jsonData.message).to.equal(\"Could not access user data.\");",
											"    }",
											"});",
											"",
											"// Test for market not found or user not the owner of the market",
											"pm.test(\"Status code is 403 if the market is not found or user is not the owner\", function () {",
											"    if (pm.response.code === 403) {",
											"        const jsonData = pm.response.json();",
											"        pm.expect(jsonData.message).to.equal(\"Market not found or you are not the owner of this auction.\");",
											"    }",
											"});",
											"",
											"// Test for no offers found",
											"pm.test(\"Status code is 404 if no offers exist for the market\", function () {",
											"    if (pm.response.code === 404) {",
											"        const jsonData = pm.response.json();",
											"        pm.expect(jsonData.message).to.equal(\"No offers found for this market.\");",
											"    }",
											"});",
											"",
											"// Test for invalid offer from the buyer (offer not found)",
											"pm.test(\"Status code is 404 if the offer from the buyer is not found\", function () {",
											"    if (pm.response.code === 404) {",
											"        const jsonData = pm.response.json();",
											"        pm.expect(jsonData.message).to.equal(\"Offer not found for the specified buyer.\");",
											"    }",
											"});",
											"",
											"// Test for invalid request (missing market_id or buyer_id)",
											"pm.test(\"Status code is 400 when market_id or buyer_id is missing\", function () {",
											"    const body = pm.request.body;",
											"    if (!body || !body.market_id || !body.buyer_id) {",
											"        pm.response.to.have.status(400);",
											"        const jsonData = pm.response.json();",
											"        pm.expect(jsonData.message).to.equal(\"Market ID and buyer ID are required.\");",
											"    }",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwtTokenPlayer}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"market_id\": 2,\r\n    \"buyer_id\": 1\r\n  \r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{market_url}}/accept",
									"host": [
										"{{market_url}}"
									],
									"path": [
										"accept"
									]
								}
							},
							"response": []
						},
						{
							"name": "history",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test for successful response (Status 200)",
											"pm.test(\"Status code is 200 and returns transaction history\", function () {",
											"    pm.response.to.have.status(200);",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.be.an('array');",
											"    pm.expect(jsonData.length).to.be.above(0);",
											"});",
											"",
											"// Test for no transactions found (Status 404)",
											"pm.test(\"Status code is 404 if no market history is found\", function () {",
											"    pm.response.to.have.status(404);",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property(\"error\", \"No market history found for this user\");",
											"});",
											"",
											"// Test for unauthorized access (missing or invalid token)",
											"pm.test(\"Status code is 401 when no valid token is provided\", function () {",
											"    if (!pm.request.headers.has(\"Authorization\")) {",
											"        pm.response.to.have.status(401);",
											"        const jsonData = pm.response.json();",
											"        pm.expect(jsonData.message).to.equal(\"Could not access user data.\");",
											"    }",
											"});",
											"",
											"// Test for invalid token or expired token (should return 401)",
											"pm.test(\"Status code is 401 when token is invalid\", function () {",
											"    pm.response.to.have.status(401);",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.equal(\"Could not access user data.\");",
											"});",
											"",
											"// Test for valid token and response format (should return an array of transactions)",
											"pm.test(\"Response is an array with the correct structure\", function () {",
											"    const jsonData = pm.response.json();",
											"    // Ensure each transaction in the response contains expected fields",
											"    jsonData.forEach(transaction => {",
											"        pm.expect(transaction).to.have.property(\"user_seller_id\");",
											"        pm.expect(transaction).to.have.property(\"user_buyer_id\");",
											"        pm.expect(transaction).to.have.property(\"gacha_value\");",
											"        pm.expect(transaction).to.have.property(\"id_gacha\");",
											"        pm.expect(transaction).to.have.property(\"date\");",
											"    });",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwtTokenPlayer}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{market_url}}/history",
									"host": [
										"{{market_url}}"
									],
									"path": [
										"history"
									],
									"query": [
										{
											"key": "",
											"value": "",
											"disabled": true
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Admin",
					"item": [
						{
							"name": "auction-details",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test for successful response (Status 200)",
											"pm.test(\"Status code is 200 and returns auction details\", function () {",
											"    pm.response.to.have.status(200);",
											"    const jsonData = pm.response.json();",
											"    ",
											"    // Ensure the response contains the expected keys",
											"    pm.expect(jsonData).to.have.property(\"market_details\");",
											"    pm.expect(jsonData).to.have.property(\"current_offers\");",
											"",
											"    // Check if market details have the correct properties",
											"    const marketDetails = jsonData.market_details;",
											"    pm.expect(marketDetails).to.have.property(\"market_id\");",
											"    pm.expect(marketDetails).to.have.property(\"gacha_id\");",
											"    pm.expect(marketDetails).to.have.property(\"user_id\");",
											"    pm.expect(marketDetails).to.have.property(\"initial_value\");",
											"    pm.expect(marketDetails).to.have.property(\"last_offer_value\");",
											"    pm.expect(marketDetails).to.have.property(\"start_date\");",
											"    pm.expect(marketDetails).to.have.property(\"end_date\");",
											"",
											"    // Ensure offers are an array and each offer contains the right properties",
											"    const offers = jsonData.current_offers;",
											"    pm.expect(offers).to.be.an('array');",
											"    offers.forEach(offer => {",
											"        pm.expect(offer).to.have.property(\"offer_id\");",
											"        pm.expect(offer).to.have.property(\"user_id\");",
											"        pm.expect(offer).to.have.property(\"offer_value\");",
											"    });",
											"});",
											"",
											"// Test for not found market (Status 404)",
											"pm.test(\"Status code is 404 if market not found\", function () {",
											"    pm.response.to.have.status(404);",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property(\"message\", \"Market not found.\");",
											"});",
											"",
											"// Test for unauthorized access (missing or invalid token)",
											"pm.test(\"Status code is 401 when no valid token is provided\", function () {",
											"    if (!pm.request.headers.has(\"Authorization\")) {",
											"        pm.response.to.have.status(401);",
											"        const jsonData = pm.response.json();",
											"        pm.expect(jsonData.message).to.equal(\"Could not access user data.\");",
											"    }",
											"});",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwtTokenAdmin}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{market_url}}/auction-details/1",
									"host": [
										"{{market_url}}"
									],
									"path": [
										"auction-details",
										"1"
									],
									"query": [
										{
											"key": "",
											"value": "",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "update-auction",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test for successful auction update (Status 200)",
											"pm.test(\"Status code is 200 and returns auction updated message\", function () {",
											"    pm.response.to.have.status(200);",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property(\"message\", \"Auction updated successfully.\");",
											"});",
											"",
											"// Test for missing required fields (init_value and start_date) (Status 400)",
											"pm.test(\"Status code is 400 when init_value or start_date is missing\", function () {",
											"    pm.response.to.have.status(400);",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property(\"message\", \"Initial value and start date are required.\");",
											"});",
											"",
											"// Test for market not found (Status 404)",
											"pm.test(\"Status code is 404 when market not found\", function () {",
											"    pm.response.to.have.status(404);",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property(\"message\", \"Market not found.\");",
											"});",
											"",
											"// Test for unauthorized access (missing or invalid token)",
											"pm.test(\"Status code is 401 when no valid token is provided\", function () {",
											"    if (!pm.request.headers.has(\"Authorization\")) {",
											"        pm.response.to.have.status(401);",
											"        const jsonData = pm.response.json();",
											"        pm.expect(jsonData.message).to.equal(\"Could not access user data.\");",
											"    }",
											"});",
											"",
											"// Test for invalid token or expired token (should return 401)",
											"pm.test(\"Status code is 401 when token is invalid\", function () {",
											"    pm.response.to.have.status(401);",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.equal(\"Could not access user data.\");",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwtTokenAdmin}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"init_value\": 85.00,\r\n    \"value_last_offer\": 100.00,\r\n    \"start_date\": \"2024-11-22\",\r\n    \"end_date\": \"2024-11-25\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{market_url}}/update-auction/1",
									"host": [
										"{{market_url}}"
									],
									"path": [
										"update-auction",
										"1"
									],
									"query": [
										{
											"key": "",
											"value": "",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "history-all",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test for successful response (Status 200)",
											"pm.test(\"Status code is 200 and returns market history\", function () {",
											"    pm.response.to.have.status(200);",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.be.an('array');",
											"});",
											"",
											"// Test for unauthorized access (missing or invalid token)",
											"pm.test(\"Status code is 401 when no valid token is provided\", function () {",
											"    if (!pm.request.headers.has(\"Authorization\")) {",
											"        pm.response.to.have.status(401);",
											"        const jsonData = pm.response.json();",
											"        pm.expect(jsonData.message).to.equal(\"Could not access user data.\");",
											"    }",
											"});",
											"",
											"// Test for invalid or expired token (should return 401)",
											"pm.test(\"Status code is 401 when token is invalid\", function () {",
											"    pm.response.to.have.status(401);",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.equal(\"Could not access user data.\");",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwtTokenAdmin}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{market_url}}/history/all",
									"host": [
										"{{market_url}}"
									],
									"path": [
										"history",
										"all"
									],
									"query": [
										{
											"key": "",
											"value": "",
											"disabled": true
										}
									]
								}
							},
							"response": []
						}
					]
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "gacha_url",
			"value": "http://localhost/gacha",
			"type": "default"
		}
	]
}